//==============================================================//
//                                                              //
//       This file is generated by axNodeGen                    //
//                                                              //
//==============================================================//

#include "SCN_Geometry.h"

namespace Anon{ 

struct SCN_Geometry::Spec : public AnonObjectSpec {
	struct Field_diagram : public axFieldInfo {
		Field_diagram(axType* type) : axFieldInfo(type, &SCN_Geometry::_diagram, "diagram", "Diagram") {
		}
		virtual void onSetToDefaultValue(axValuePtr& data) const final {
			data.value<GEO_Diagram>() = {axTag::Reset};
		};
	};
	Field_diagram field_diagram;

	static const Spec* s_instance;

	axArray<axFieldInfo*, 16> _fields;

	Spec(axType* type)
		: AnonObjectSpec(type)
		, field_diagram(type)
	{
		s_instance = this;
		axInt ownFieldCount = 1;
		auto baseFieldCount = type->_baseClass->fields().size();
		_fields.resize(ownFieldCount + baseFieldCount);
		_fields.slice(0, baseFieldCount).copyValues(type->_baseClass->fields());
		auto ownFields = _fields.sliceFrom(baseFieldCount);

		ownFields[0] = &field_diagram;

		type->_fields    = _fields.span();
		type->_ownFields = ownFields;
	}

};

void SCN_Geometry::s_initRtti(axType* type) {
	static Spec spec(type);
}

const SCN_Geometry::Spec* SCN_Geometry::Spec::s_instance = nullptr;

void SCN_Geometry::onInitProps() {
	Base::onInitProps();
	auto* spec = Spec::s_instance;
	_initProp(spec->field_diagram, _diagram);
}

bool SCN_Geometry::onReadJsonProp(axJsonReader& rd_) {
	bool _ret = Base::onReadJsonProp(rd_);
	if (rd_.isMember("diagram")) { rd_.readValue(_diagram); _ret = true; }
	return _ret;
}

void SCN_Geometry::onWriteJsonProp(axJsonWriter& wr_) const {
	Base::onWriteJsonProp(wr_);
	wr_.writeMember("diagram", _diagram);
}

} // namespace 
