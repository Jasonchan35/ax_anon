//==============================================================//
//                                                              //
//       This file is generated by axNodeGen                    //
//                                                              //
//==============================================================//

#include "SCN_PointLight.h"

namespace Anon{ 

struct SCN_PointLight::Spec : public AnonObjectSpec {
	struct Field_lightPower : public axFieldInfo {
		Field_lightPower(axType* type) : axFieldInfo(type, &SCN_PointLight::lightPower, "lightPower", "Light Power") {
		}
		virtual void onSetToDefaultValue(axValuePtr& data) const final {
			data.value<float>() = 100;
		};
	};
	Field_lightPower field_lightPower;

	struct Field_lightColor : public axFieldInfo {
		Field_lightColor(axType* type) : axFieldInfo(type, &SCN_PointLight::lightColor, "lightColor", "Light Color") {
		}
		virtual void onSetToDefaultValue(axValuePtr& data) const final {
			data.value<ColorRGB>() = {1,1,1};
		};
	};
	Field_lightColor field_lightColor;

	static const Spec* s_instance;

	axArray<axFieldInfo*, 16> _fields;

	Spec(axType* type)
		: AnonObjectSpec(type)
		, field_lightPower(type)
		, field_lightColor(type)
	{
		s_instance = this;
		axInt ownFieldCount = 2;
		auto baseFieldCount = type->_baseClass->fields().size();
		_fields.resize(ownFieldCount + baseFieldCount);
		_fields.slice(0, baseFieldCount).copyValues(type->_baseClass->fields());
		auto ownFields = _fields.sliceFrom(baseFieldCount);

		ownFields[0] = &field_lightPower;
		ownFields[1] = &field_lightColor;

		type->_fields    = _fields.span();
		type->_ownFields = ownFields;
	}

};

void SCN_PointLight::s_initRtti(axType* type) {
	static Spec spec(type);
}

const SCN_PointLight::Spec* SCN_PointLight::Spec::s_instance = nullptr;

void SCN_PointLight::onInitProps() {
	Base::onInitProps();
	auto* spec = Spec::s_instance;
	_initProp(spec->field_lightPower, lightPower);
	_initProp(spec->field_lightColor, lightColor);
}

bool SCN_PointLight::onReadJsonProp(axJsonReader& rd_) {
	bool _ret = Base::onReadJsonProp(rd_);
	if (rd_.isMember("lightPower")) { rd_.readValue(lightPower); _ret = true; }
	if (rd_.isMember("lightColor")) { rd_.readValue(lightColor); _ret = true; }
	return _ret;
}

void SCN_PointLight::onWriteJsonProp(axJsonWriter& wr_) const {
	Base::onWriteJsonProp(wr_);
	wr_.writeMember("lightPower", lightPower);
	wr_.writeMember("lightColor", lightColor);
}

} // namespace 
