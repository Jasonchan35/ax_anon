//==============================================================//
//                                                              //
//       This file is generated by axNodeGen                    //
//                                                              //
//==============================================================//

#include "GEO_Node.h"

namespace Anon{ 

struct GEO_Node::Spec : public AnonObjectSpec {
	struct Field_output : public axFieldInfo {
		Field_output(axType* type) : axFieldInfo(type, &GEO_Node::_output, "output", "Output") {
			static DontSaveAttribute DontSave;
			static OutputAttribute Output;
			static axAttribute* attrs[] = {&DontSave, &Output};
			_attributes = axSpan_make(attrs);
		}
		virtual void onSetToDefaultValue(axValuePtr& data) const final {
			data.value<GEO_GeoData>() = GEO_GeoData();
		};
	};
	Field_output field_output;

	static const Spec* s_instance;

	axArray<axFieldInfo*, 16> _fields;

	Spec(axType* type)
		: AnonObjectSpec(type)
		, field_output(type)
	{
		s_instance = this;
		axInt ownFieldCount = 1;
		auto baseFieldCount = type->_baseClass->fields().size();
		_fields.resize(ownFieldCount + baseFieldCount);
		_fields.slice(0, baseFieldCount).copyValues(type->_baseClass->fields());
		auto ownFields = _fields.sliceFrom(baseFieldCount);

		ownFields[0] = &field_output;

		type->_fields    = _fields.span();
		type->_ownFields = ownFields;
	}

};

void GEO_Node::s_initRtti(axType* type) {
	static Spec spec(type);
}

const GEO_Node::Spec* GEO_Node::Spec::s_instance = nullptr;

void GEO_Node::onInitProps() {
	Base::onInitProps();
	auto* spec = Spec::s_instance;
	_initProp(spec->field_output, _output);
}

bool GEO_Node::onReadJsonProp(axJsonReader& rd_) {
	bool _ret = Base::onReadJsonProp(rd_);
	return _ret;
}

void GEO_Node::onWriteJsonProp(axJsonWriter& wr_) const {
	Base::onWriteJsonProp(wr_);
}

} // namespace 
