//==============================================================//
//                                                              //
//       This file is generated by axNodeGen                    //
//                                                              //
//==============================================================//

#include "GEO_Grid.h"

namespace Anon{ 

struct GEO_Grid::Spec : public AnonObjectSpec {
	struct Field_center : public axFieldInfo {
		Field_center(axType* type) : axFieldInfo(type, &GEO_Grid::_center, "center", "Center") {
		}
		virtual void onSetToDefaultValue(axValuePtr& data) const final {
			data.value<Vec3d>() = Vec3d(0,0,0);
		};
	};
	Field_center field_center;

	struct Field_size : public axFieldInfo {
		Field_size(axType* type) : axFieldInfo(type, &GEO_Grid::_size, "size", "Size") {
		}
		virtual void onSetToDefaultValue(axValuePtr& data) const final {
			data.value<Vec2d>() = Vec2d(10,10);
		};
	};
	Field_size field_size;

	struct Field_div : public axFieldInfo {
		Field_div(axType* type) : axFieldInfo(type, &GEO_Grid::_div, "div", "Div") {
		}
		virtual void onSetToDefaultValue(axValuePtr& data) const final {
			data.value<Vec2i>() = Vec2i(10,10);
		};
	};
	Field_div field_div;

	static const Spec* s_instance;

	axArray<axFieldInfo*, 16> _fields;

	Spec(axType* type)
		: AnonObjectSpec(type)
		, field_center(type)
		, field_size(type)
		, field_div(type)
	{
		s_instance = this;
		axInt ownFieldCount = 3;
		auto baseFieldCount = type->_baseClass->fields().size();
		_fields.resize(ownFieldCount + baseFieldCount);
		_fields.slice(0, baseFieldCount).copyValues(type->_baseClass->fields());
		auto ownFields = _fields.sliceFrom(baseFieldCount);

		ownFields[0] = &field_center;
		ownFields[1] = &field_size;
		ownFields[2] = &field_div;

		type->_fields    = _fields.span();
		type->_ownFields = ownFields;
	}

};

void GEO_Grid::s_initRtti(axType* type) {
	static Spec spec(type);
}

const GEO_Grid::Spec* GEO_Grid::Spec::s_instance = nullptr;

void GEO_Grid::onInitProps() {
	Base::onInitProps();
	auto* spec = Spec::s_instance;
	_initProp(spec->field_center, _center);
	_initProp(spec->field_size, _size);
	_initProp(spec->field_div, _div);
}

bool GEO_Grid::onReadJsonProp(axJsonReader& rd_) {
	bool _ret = Base::onReadJsonProp(rd_);
	if (rd_.isMember("center")) { rd_.readValue(_center); _ret = true; }
	if (rd_.isMember("size")) { rd_.readValue(_size); _ret = true; }
	if (rd_.isMember("div")) { rd_.readValue(_div); _ret = true; }
	return _ret;
}

void GEO_Grid::onWriteJsonProp(axJsonWriter& wr_) const {
	Base::onWriteJsonProp(wr_);
	wr_.writeMember("center", _center);
	wr_.writeMember("size", _size);
	wr_.writeMember("div", _div);
}

} // namespace 
