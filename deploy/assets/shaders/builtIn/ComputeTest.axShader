Shader {
	Properties {
		Color	color(0,1,0,1)
	}

	Pass "Pass0" {
		CsFunc	cs_main
	}    
}

struct Pixel
{
    float3 color;
	float  foo;
};

static const int sizeofPixel = 16;

// StructuredBuffer<Pixel> Buffer0 : register(t0);
RWStructuredBuffer<Pixel> BufferOut : register(u0);
double testDouble;
double testDouble2;

uint packDouble0, packDouble1;
uint2 packDouble;

/*
float3 readPixel(int x, int y)
{
	float3 output;
	uint index = (x + y * 1024);

	output.x = (float)(((Buffer0[index].color ) & 0x000000ff)      ) / 255.0f; 
	output.y = (float)(((Buffer0[index].color ) & 0x0000ff00) >> 8 ) / 255.0f;
	output.z = (float)(((Buffer0[index].color ) & 0x00ff0000) >> 16) / 255.0f;

	return output;
}
*/

void writeToPixel(int x, int y, float3 color)
{
	uint index = (x + y * 4);
	BufferOut[index].color = color;
}

[numthreads(4, 4, 1)]
void cs_main( uint3 dispatchThreadID : SV_DispatchThreadID )
{
//	float3 pixel = readPixel(dispatchThreadID.x, dispatchThreadID.y);
//	pixel.rgb = pixel.r * 0.3 + pixel.g * 0.59 + pixel.b * 0.11;

	double d = asdouble(packDouble.x, packDouble.y);

	float3 pixel = float3(dispatchThreadID.x, dispatchThreadID.y, 123.45 * testDouble);
	writeToPixel(dispatchThreadID.x, dispatchThreadID.y, pixel);
}